<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>java on 127.0.0.1</title><link>https://127001.me/tags/java/</link><description>Recent content in java on 127.0.0.1</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Dmytro Kostiuchenko</copyright><lastBuildDate>Mon, 10 Feb 2020 22:59:08 -0500</lastBuildDate><atom:link href="https://127001.me/tags/java/index.xml" rel="self" type="application/rss+xml"/><item><title>You may be doing FP already</title><link>https://127001.me/post/you-may-be-doing-fp-already/</link><pubDate>Mon, 10 Feb 2020 22:59:08 -0500</pubDate><guid>https://127001.me/post/you-may-be-doing-fp-already/</guid><description>&lt;p>Functional programming (FP) has been a somewhat hot topic in recent years in my surroundings. Although in my &lt;em>close&lt;/em>
surroundings people are usually not zealous or overly excited, I do notice sometimes talks, discussions and vocally
expressed opinions where &lt;em>tremendous&lt;/em> benefits of FP over other paradigms are claimed, through presenting FP as a
fundamentally new approach to writing code, opposite to, say, OOP. Some go as far as saying, that one must fully ditch
OOP and all related experience because it’s all just a mistake.&lt;/p>
&lt;p>Such extreme claims are rarely challenged. When a person with an OOP background gets involved in any FP-related
discussion, it quickly gets overwhelmed with new unfamiliar vocabulary: algebras, monads, semigroups, functors, type
classes…​ And I start questioning intents of those claims — are they made to make people shift to FP, or to prove, that
some definition of FP is better than some definition of OOP?&lt;/p>
&lt;p>With this post, I hope to show that FP can be seen as an evolutionary step, a generalization over practices we already
consider the best in OOP paradigm. And if viewed like this, it can be useful even when adopted gradually. I hope this
point of view will persuade programmers to look into FP and to borrow new techniques from it to improve non-FP code.&lt;/p></description></item><item><title>Overloading that is not permitted or Java bridge methods</title><link>https://127001.me/post/java-bridge-methods/</link><pubDate>Mon, 09 May 2016 00:59:08 +0200</pubDate><guid>https://127001.me/post/java-bridge-methods/</guid><description>&lt;aside class="admonition-block note" role="note">&lt;h6 class="block-title">&lt;span class="title-label">Note: &lt;/span>Third-party translation&lt;/h6>&lt;p>This article is also available in Russian &lt;a class="bare" href="https://habr.com/ru/company/haulmont/blog/426419/">https://habr.com/ru/company/haulmont/blog/426419/&lt;/a>&lt;/p>&lt;/aside>
&lt;p>Most of my technical interviews for Java developer position include a puzzle, where candidate should implement 2 very
similar interfaces in a single class:&lt;/p>
&lt;div class="listing-block">&lt;pre class="rouge highlight" style="background-color: #f8f8f8">&lt;code data-lang="java">&lt;span style="color: #999988;font-style: italic">// Implement both interfaces in a single class if possible&lt;/span>
&lt;span style="color: #999988;font-style: italic">// Explain why possible or not possible&lt;/span>
&lt;span style="color: #000000;font-weight: bold">interface&lt;/span> &lt;span style="color: #445588;font-weight: bold">WithPrimitiveInt&lt;/span> &lt;span style="color: #000000;font-weight: bold">{&lt;/span>
&lt;span style="color: #445588;font-weight: bold">void&lt;/span> &lt;span style="color: #990000;font-weight: bold">m&lt;/span>&lt;span style="color: #000000;font-weight: bold">(&lt;/span>&lt;span style="color: #445588;font-weight: bold">int&lt;/span> &lt;span style="background-color: #f8f8f8">i&lt;/span>&lt;span style="color: #000000;font-weight: bold">);&lt;/span>
&lt;span style="color: #000000;font-weight: bold">}&lt;/span>
&lt;span style="color: #000000;font-weight: bold">interface&lt;/span> &lt;span style="color: #445588;font-weight: bold">WithInteger&lt;/span> &lt;span style="color: #000000;font-weight: bold">{&lt;/span>
&lt;span style="color: #445588;font-weight: bold">void&lt;/span> &lt;span style="color: #990000;font-weight: bold">m&lt;/span>&lt;span style="color: #000000;font-weight: bold">(&lt;/span>&lt;span style="color: #445588;font-weight: bold">Integer&lt;/span> &lt;span style="background-color: #f8f8f8">i&lt;/span>&lt;span style="color: #000000;font-weight: bold">);&lt;/span>
&lt;span style="color: #000000;font-weight: bold">}&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>Sometimes candidates, not being sure about the right answer, are willing to solve the following puzzle instead (I give
it to candidates later anyway):&lt;/p>
&lt;div class="listing-block">&lt;pre class="rouge highlight" style="background-color: #f8f8f8">&lt;code data-lang="java">&lt;span style="color: #000000;font-weight: bold">interface&lt;/span> &lt;span style="color: #445588;font-weight: bold">S&lt;/span> &lt;span style="color: #000000;font-weight: bold">{&lt;/span>
&lt;span style="color: #445588;font-weight: bold">String&lt;/span> &lt;span style="color: #990000;font-weight: bold">m&lt;/span>&lt;span style="color: #000000;font-weight: bold">(&lt;/span>&lt;span style="color: #445588;font-weight: bold">int&lt;/span> &lt;span style="background-color: #f8f8f8">i&lt;/span>&lt;span style="color: #000000;font-weight: bold">);&lt;/span>
&lt;span style="color: #000000;font-weight: bold">}&lt;/span>
&lt;span style="color: #000000;font-weight: bold">interface&lt;/span> &lt;span style="color: #445588;font-weight: bold">V&lt;/span> &lt;span style="color: #000000;font-weight: bold">{&lt;/span>
&lt;span style="color: #445588;font-weight: bold">void&lt;/span> &lt;span style="color: #990000;font-weight: bold">m&lt;/span>&lt;span style="color: #000000;font-weight: bold">(&lt;/span>&lt;span style="color: #445588;font-weight: bold">int&lt;/span> &lt;span style="background-color: #f8f8f8">i&lt;/span>&lt;span style="color: #000000;font-weight: bold">);&lt;/span>
&lt;span style="color: #000000;font-weight: bold">}&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>How Java logging frameworks determine caller class and method name</title><link>https://127001.me/post/java-logging-caller-class-and-method/</link><pubDate>Tue, 08 Apr 2014 23:54:49 +0200</pubDate><guid>https://127001.me/post/java-logging-caller-class-and-method/</guid><description>&lt;p>This post describes how java logging frameworks (&lt;em>log4j&lt;/em>, for example) know the exact place in code (class and method name), where the logging statement was invoked.&lt;/p>
&lt;p>I decided to write this post because often I meet developers who do not understant what is the cost of writing caller information to logs, or why the cost is so high.&lt;/p></description></item></channel></rss>