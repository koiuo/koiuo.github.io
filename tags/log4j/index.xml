<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>log4j on 127.0.0.1</title><link>https://127001.me/tags/log4j/</link><description>Recent content in log4j on 127.0.0.1</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Dmytro Kostiuchenko</copyright><lastBuildDate>Tue, 08 Apr 2014 23:54:49 +0200</lastBuildDate><atom:link href="https://127001.me/tags/log4j/index.xml" rel="self" type="application/rss+xml"/><item><title>How Java logging frameworks determine caller class and method name</title><link>https://127001.me/post/java-logging-caller-class-and-method/</link><pubDate>Tue, 08 Apr 2014 23:54:49 +0200</pubDate><guid>https://127001.me/post/java-logging-caller-class-and-method/</guid><description>&lt;p>This post describes how java logging frameworks (&lt;em>log4j&lt;/em>, for example) know the exact place in code (class and method name), where the logging statement was invoked.&lt;/p>
&lt;p>I decided to write this post because often I meet developers who do not understant what is the cost of writing caller information to logs, or why the cost is so high.&lt;/p></description></item></channel></rss>